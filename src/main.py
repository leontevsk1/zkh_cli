#!/usr/bin/env python3
import argparse
import json
import sys
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –º–æ–¥—É–ª–µ–π –ø–∞–π–ø–ª–∞–π–Ω–∞
from whisper.app import ASR
from ml.app import Models
from users_messages.app import review_and_confirm

def parse_args():
    p = argparse.ArgumentParser("–ñ–ö–•: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π")
    p.add_argument(
        "--audio",
        help="–ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É (wav/mp3/m4a/ogg –∏ —Ç.–ø.)",
        required=True
    )
    p.add_argument(
        "--config",
        default="src/config.json",
        help="–ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞"
    )
    p.add_argument(
        "--yes",
        action="store_true",
        help="–ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å y/N)"
    )
    return p.parse_args()

def main():
    args = parse_args()
    cfg_path = Path(args.config)
    if not cfg_path.exists():
        print(f"‚ùå Config not found: {cfg_path}")
        sys.exit(1)
    cfg = json.loads(cfg_path.read_text(encoding="utf-8"))

    # === Whisper ===
    asr = ASR(
        model_dir=cfg["whisper_model_dir"],
        device=cfg.get("device", "cpu"),
        compute_type=cfg.get("compute_type", "int8"),
        cpu_threads=int(cfg.get("cpu_threads", 8)),
        language=cfg.get("language", "ru"),
        beam_size=int(cfg.get("beam_size", 1)),
        vad_filter=bool(cfg.get("vad_filter", True)),
        min_silence_ms=int(cfg.get("min_silence_ms", 500)),
    )

    print("üéô –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏...")
    asr_out = asr.transcribe(args.audio)
    if not asr_out["text"]:
        print("‚ùå –¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        sys.exit(2)

    # === ML ===
    nlp = Models(cfg["ml_models_root"])
    print("ü§ñ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è...")
    ml_out = nlp.infer(asr_out["text"])

    # === –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ===
    saved = review_and_confirm(ml_out, auto_confirm=args.yes)
    if saved:
        print("‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    else:
        print("üö´ –ó–∞—è–≤–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

if __name__ == "__main__":
    main()
